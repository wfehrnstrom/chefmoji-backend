syntax = "proto3";

package chefmoji;

message MapRow {
    // In format [TILE1_STR,TILE2_STR,TILE3_STR]
    // In format 'F ': First character of each string value is a string representing the cell base.
    // The second character of each string value represents an entity if any. Else, it is a space or nothing at all.
    repeated string cells = 1;
}

message MapUpdate {
    // A global game synchronizing tick count may be used in the future.
    //
    // In format [ROW1_STR,ROW2_STR,ROW3_STR].
    repeated MapRow map = 1;
    repeated PlayerUpdate players = 2; 
    repeated OrderUpdate order = 3;
}

message PlayerUpdate {
    // In format (MapX, MapY). X goes from left to right, and Y top to bottom of the map.
    repeated uint32 position = 1;
    string inventory = 2;
    string id = 3;
}

enum OrderType {
	HOT_DOG = 0;
	PIZZA = 1;
	WAFFLES = 2;
	SUSHI = 3;
	EGGS = 4;

	GYRO = 5;
	PANCAKES = 6;
	RAMEN = 7;
	STEW = 8;

	BENTO_BOX = 9;
	TACO = 10;
	SANDWICH = 11;
	HAMBURGER = 12;
	BURRITO = 13;
	CURRY_RICE = 14;
}

message OrderUpdate {
    uint32 uid = 1;
    // in time since game start
    uint32 registration_time = 2;
    /* The OrderType is the type of food produced by cooking the recipe
       There is no need to provide a list of ingredients for each recipe 
       because both client and server will agree upon the recipe for each
       order beforehand */
    OrderType order_type = 3;
    // Server To Client: This order has been fulfilled. Tear it down.
    bool fulfilled = 4;
}